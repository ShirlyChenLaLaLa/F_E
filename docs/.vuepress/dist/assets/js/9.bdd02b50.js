(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{173:function(t,e,i){"use strict";i.r(e);var a=i(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),i("hr"),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/dwqs/blog/issues/41",target:"_blank",rel:"noopener noreferrer"}},[t._v("[译]详解React Native动画"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://future-challenger.gitbooks.io/react-native-animation/content/panresponder.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Native 详解"),i("OutboundLink")],1)])]),t._v(" "),t._m(1),t._v(" "),i("p",[t._v("为了创建一个动画，我们首先要创建一个动画使用的值。一般可以这样做：\nnew Animated.Value(0)")]),t._v(" "),t._m(2),t._v(" "),i("p",[t._v("Animated 提供了两种类型的值：")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),i("p",[t._v("Animated 用于创建动画的主要方法：")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),i("p",[t._v("Animated 实现组合动画的主要方式：")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),i("p",[t._v("Animated 封装了四个可以动画化的组件：")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),i("p",[t._v("插值函数：\ninterpolate()：将输入值范围转换为输出值范围")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"react-native-动画（animated）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-native-动画（animated）","aria-hidden":"true"}},[this._v("#")]),this._v(" React Native 动画（Animated）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"创建动画值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建动画值","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建动画值")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"动画值类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动画值类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 动画值类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Animated.Value() 用于单个值。")]),this._v(" "),e("li",[this._v("Animated.ValueXY() 用于矢量值。\n创建一个Animated.ValueXY实例和Animated.Value基本上是一样的：new Animated.ValueXY({x: 0, y: 0})。只不过ValueXY一般用于处理组件的位置或是处理手势。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"创建动画的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建动画的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建动画的方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Animated.timing()：最常用的动画类型，使一个值按照一个过渡曲线而随时间变化。（消耗类型的）")]),this._v(" "),e("li",[this._v("Animated.spring()：弹簧效果，基础的单次弹跳物理模型实现的 spring 动画。使用spring可以定义一个只需要起始值和最终值的动画，不需要给出动画执行的时间。")]),this._v(" "),e("li",[this._v("Animated.decay()：衰变效果，以一个初始的速度和一个衰减系数逐渐减慢变为0。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"实现组合动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现组合动画","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现组合动画")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Animated.parallel()：同时开始一个动画数组里的全部动画。默认情况下，如果有任何一个动画停止了，其余的也会被停止。可以通过stopTogether 选项设置为 false 来取消这种关联。")]),this._v(" "),e("li",[this._v("Animated.sequence()：按顺序执行一个动画数组里的动画，等待一个完成后再执行下一个。如果当前的动画被中止，后面的动画则不会继续执行。使用sequence可以把多个动画组织起来，然他们依次顺序执行。")]),this._v(" "),e("li",[this._v("Animated.stagger()：一个动画数组，传入一个时间参数来设置队列动画间的延迟，即在前一个动画开始之后，隔一段指定时间才开始执行下一个动画里面的动画，并不关心前一个动画是否已经完成，所以有可能会出现同时执行（重叠）的情况。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"可动画化的四个组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可动画化的四个组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 可动画化的四个组件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Animated.View")]),this._v(" "),e("li",[this._v("Animated.Text")]),this._v(" "),e("li",[this._v("Animated.Image")]),this._v(" "),e("li",[this._v("Animated.ScrollView")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"合成动画值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合成动画值","aria-hidden":"true"}},[this._v("#")]),this._v(" 合成动画值")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Animated.add()")]),this._v(" "),e("li",[this._v("Animated.divide()")]),this._v(" "),e("li",[this._v("Animated.modulo()")]),this._v(" "),e("li",[this._v("Animated.multiply()\n可以使用加减乘除以及取余等运算来把两个动画值合成为一个新的动画值。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"插值函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插值函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 插值函数")])}],!1,null,null,null);s.options.__file="animation.md";e.default=s.exports}}]);