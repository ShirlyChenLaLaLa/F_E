(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{183:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),n("p",[t._v("useState就是react提供的一个Hook，它是第一个也是最重要的Reack hook。通过在代码中导入userState，就表明一个要在react组件中使用某些state，更重要的是，react组件并没有使用es6的class，它就是一个纯粹而简单的函数。这就是hooks最吸引人的地方。")]),t._v(" "),n("p",[t._v("useState 会返回俩个值：当前状态和一个让你更新它的函数，我们可以在事件处理函数中调用这个函数。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),n("p",[t._v("通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 DOM 更新之后调用它。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),n("p",[t._v("每个effect都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。")]),t._v(" "),n("p",[t._v("Hook 允许我们按照代码的用途分离他们。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React 跳过对 effect 的调用，只要传递数组作为 useEffect 的第二个可选参数即可：")]),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("当第二个参数传[]的时候，userEffect就跟componentDidMount和componentWillUnmount的思维模式没啥两样了。")]),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("useState 的替代方案。它接收一个形如 (state, action) => newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("这种模式会使一些优化失效，所以应该避免滥用它，react保证dispatch在每次渲染中都是一样的。所以可以在依赖中去掉，它不会引起effect不必要的重复执行。")]),t._v(" "),n("p",[t._v("当dispatch的时候，React只是记住了action- 它会在下一次渲染中再次调用reducer。在那个时候，新的props就可以被访问到，而且reducer的调用也不是在effect里面。")]),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("推荐使用eslint-plugin-react-hooks插件的exhaustice-deps lint规则。")]),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("它返回一个 memoized 回调函数。")]),t._v(" "),t._m(18),t._v(" "),n("p",[t._v("把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。")]),t._v(" "),n("p",[t._v("useCallback本质上是添加了一层依赖检查。它以另一种方式解决了问题 - 我们使函数本身只在需要的时候才改变，而不是去掉对函数的依赖。")]),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("类似useCallback，useMemo可以让我们对复杂对象做类似的事情。")]),t._v(" "),n("p",[t._v("与useCallback不同的是，它返回一个memoized值。")]),t._v(" "),t._m(20),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/#tldr",target:"_blank",rel:"noopener noreferrer"}},[t._v("useEffect完整指南"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://reactjs.org/docs/hooks-reference.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("react hooks官方文档"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.valentinog.com/blog/hooks/#React_Hooks_Tutorial_for_Beginners_what_you_will_learn",target:"_blank",rel:"noopener noreferrer"}},[t._v("react hooks学习指南"),n("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"理解hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解hooks","aria-hidden":"true"}},[this._v("#")]),this._v(" 理解hooks")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"react-hook的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-hook的定义","aria-hidden":"true"}},[this._v("#")]),this._v(" react hook的定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate","aria-hidden":"true"}},[this._v("#")]),this._v(" useState")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("import React, { useState } from 'react';\nfunction Example() {\n\t// 声明一个新的叫做 “count” 的state 变量\n\tconst [count, setCount] = useState(0);\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t);\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect","aria-hidden":"true"}},[this._v("#")]),this._v(" useEffect")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("useEffect与react class 里面的componentDidMount，componentDidupdate，和componentWillUnmount功能目的相同，但统一为单个API")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('import React, { useState, useEffect } from "react";\nexport default function DataLoader() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch("http://localhost:3001/links/")\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n  return (\n    <div>\n      <ul>\n        {data.map(el => (\n          <li key={el.id}>{el.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"useeffect-做了什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-做了什么？","aria-hidden":"true"}},[this._v("#")]),this._v(" useEffect 做了什么？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("与 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"添加和移除订阅的逻辑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加和移除订阅的逻辑","aria-hidden":"true"}},[this._v("#")]),this._v(" 添加和移除订阅的逻辑")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("function FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  // ...\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何跳过对effect的调用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何跳过对effect的调用？","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何跳过对effect的调用？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // 仅在 count 更改时更新\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usereducer（额外的hook，特殊情况下可能会用到）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usereducer（额外的hook，特殊情况下可能会用到）","aria-hidden":"true"}},[this._v("#")]),this._v(" UseReducer（额外的hook，特殊情况下可能会用到）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("const [state, dispatch] = useReducer(reducer, initialArg, init);\n\nfunction Counter({ step }) {\n\tconst [count, dispatch] = useReducer(reducer, 0);\n\t\n\tfunction reducer(state, action) {\n\t\tif (action.type === 'tick') {\n\t\t\treturn state + step;\n\t\t} else {\n\t\t\tthrow new Error();\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tconst id = setInterval(() => {\n\t\t\tdispatch({ type: 'tick'});\n\t\t}, 1000);\n\t\treturn () => clearInterval(id);\n\t}, [dispatch]);\n\t\n\treturn <h1>{count}</h1>\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("这就是为什么倾向认为useReducer是Hooks的“作弊模式”。它可以把更新逻辑和描述发生了什么分开。结果是，这可以帮助我们移除不必需的依赖，避免不必要的effect调用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usecallback-（类似shouldcomponentupdate）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usecallback-（类似shouldcomponentupdate）","aria-hidden":"true"}},[this._v("#")]),this._v(" useCallback （类似shouldComponentUpdate）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("const memoizedCallback = useCallback(\n\t() => {\n\t\tdoSomething(a, b);\n\t}, [a, b],\n)\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usememo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usememo","aria-hidden":"true"}},[this._v("#")]),this._v(" useMemo")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("function ColorPicker() {\n\tconst [color, setColor] = useState('pink');\n\tconst style = useMemo(() => ({ color }), [color]);\n\treturn <Child style={style} />;\n}\n")])])}],!1,null,null,null);r.options.__file="reactHooks.md";e.default=r.exports}}]);