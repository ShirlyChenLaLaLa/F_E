{"remainingRequest":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yuhanchen/repos/F_E/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yuhanchen/repos/F_E/docs/node/avoidMemoryLeak.md?vue&type=template&id=34cccc9b&","dependencies":[{"path":"/Users/yuhanchen/repos/F_E/docs/node/avoidMemoryLeak.md","mtime":1547963060439},{"path":"/Users/yuhanchen/repos/F_E/node_modules/cache-loader/dist/cjs.js","mtime":1547801009313},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1547801010156},{"path":"/Users/yuhanchen/repos/F_E/node_modules/cache-loader/dist/cjs.js","mtime":1547801009313},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/index.js","mtime":1547801010156},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1547801017119}],"contextDependencies":[],"result":["\n<div class=\"content\"><h3 id=\"node如何避免内存泄漏\"><a class=\"header-anchor\" href=\"#node如何避免内存泄漏\" aria-hidden=\"true\">#</a> node如何避免内存泄漏</h3>\n<hr>\n<h4 id=\"_1-不要阻塞event-loop的执行，特别是大循环或者io同步操作\"><a class=\"header-anchor\" href=\"#_1-不要阻塞event-loop的执行，特别是大循环或者io同步操作\" aria-hidden=\"true\">#</a> 1.不要阻塞Event Loop的执行，特别是大循环或者IO同步操作</h4>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'shirly'</span><span class=\"token punctuation\">;</span>\n    user<span class=\"token punctuation\">.</span>pass <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面的很长的循环会导致内存泄漏，因为它是一个同步执行的代码，将在进程中执行，V8在循环结束的时候，是没办法回收循环产生的内存的，这会导致内存一直增长。还有可能原因是，这个很长的执行，阻塞了node进入下一个Event loop, 导致队列中堆积了太多等待处理已经准备好的回调，进一步加剧内存的占用。</p>\n<p>用setInterval和setTimeout可以进入下一个循环。但是不推荐用setInterval和setTimeout。</p>\n<p>在Node下有一个特殊的方法，process.nextTick();</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'shirly'</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span>pass <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>不过这样的效率可能不够好。因为每次都没有效利用好一次循环。\n(未完待续)</p>\n</div>\n",null]}