{"remainingRequest":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yuhanchen/repos/F_E/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yuhanchen/repos/F_E/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yuhanchen/repos/F_E/docs/js/throttle.md?vue&type=template&id=1e465d2e&","dependencies":[{"path":"/Users/yuhanchen/repos/F_E/docs/js/throttle.md","mtime":1547963663150},{"path":"/Users/yuhanchen/repos/F_E/node_modules/cache-loader/dist/cjs.js","mtime":1547801009313},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1547801010156},{"path":"/Users/yuhanchen/repos/F_E/node_modules/cache-loader/dist/cjs.js","mtime":1547801009313},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vue-loader/lib/index.js","mtime":1547801010156},{"path":"/Users/yuhanchen/repos/F_E/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1547801017119}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"函数节流\\\"><a href=\\\"#函数节流\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数节流</h3> <hr> <h4 id=\\\"函数节流的原理：\\\"><a href=\\\"#函数节流的原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数节流的原理：</h4> <p>函数节流，简单地讲，就是让一个函数无法在很短的时间间隔内连续调用，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。\\n解决方式很容易想到，就是使用定时器，当我触发一个事件时，先setTimout让这个事件延迟一会再执行，如果在这个时间间隔内又触发了事件，那我们就clear掉原来的定时器，再setTimeout一个新的定时器延迟一会执行，就酱。</p> <h4 id=\\\"函数节流的实现代码：\\\"><a href=\\\"#函数节流的实现代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数节流的实现代码：</h4> <p>1.JavaScript高级程序设计中的实现方式：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>method<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>methor<span class=\\\"token punctuation\\\">.</span>tId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    method<span class=\\\"token punctuation\\\">.</span>tId <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        method<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>， <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>调用的时候直接写成</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onresize</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>myFunc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>这样函数间的调用至少节约100ms\\n2. inpress的实现方式</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">throttle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> delay<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t<span class=\\\"token keyword\\\">var</span> timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t<span class=\\\"token keyword\\\">var</span> context <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\ttimer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> delay<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>它使用闭包的方法形成一个私有的作用域来存放定时器变量timer。\\n调用方法为</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>window.onresize = throttle(myFunc, 100);\\n</code></pre></div><p>而上面介绍的函数节流，它这个频率就不是50ms之类的，它就是无穷大，只要你能不间断resize，刷个几年它也一次都不执行处理函数。\\n3. 函数节流升级版</p> <p>我们可以将以上的函数进行改造，增加第三个参数，即必然触发执行的时间间隔。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">throttleV2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> delay<span class=\\\"token punctuation\\\">,</span> mustRunDelay<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t<span class=\\\"token keyword\\\">var</span> timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n \\t<span class=\\\"token keyword\\\">var</span> t_start<span class=\\\"token punctuation\\\">;</span>\\n \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t<span class=\\\"token keyword\\\">var</span> context <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">,</span> t_curr <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>t_start<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t\\tt_start <span class=\\\"token operator\\\">=</span> t_curr<span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token punctuation\\\">}</span>\\n \\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>t_curr <span class=\\\"token operator\\\">-</span> t_start <span class=\\\"token operator\\\">&gt;=</span> mustRunDelay<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t\\tt_start <span class=\\\"token operator\\\">=</span> t_curr<span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token punctuation\\\">}</span>\\n \\t\\t<span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n \\t\\t\\ttimer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n \\t\\t\\t\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> delay<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\t\\t<span class=\\\"token punctuation\\\">}</span>\\n \\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>调用方式为</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>window<span class=\\\"token punctuation\\\">.</span>onresize <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">throttleV2</span><span class=\\\"token punctuation\\\">(</span>myFunc<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>则意味着，50ms的间隔内连续触发的调用，后一个调用会把前一个调用的等待处理掉，但每隔100ms至少执行一次。</p> <p>原理也很简单，打时间tag，一开始记录第一次调用的时间戳，然后每次调用函数都去拿最新的时间跟记录时间比，超出给定的时间就执行一次，更新记录时间。</p> <h4 id=\\\"函数节流的应用场景\\\"><a href=\\\"#函数节流的应用场景\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数节流的应用场景</h4> <p>对于函数节流，有如下几个场景：</p> <ul><li>游戏中的刷新率</li> <li>DOM元素拖拽</li> <li>Canvas画笔功能</li></ul> <p>总的来说，适合大量事件按时间做平均分配触发。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}